# -*- coding: utf-8 -*-
"""FP growth_M.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14mLVvJn3XFjm_IX9Oq54oBg0wV0LWHZq
"""

import pandas as pd
from itertools import combinations


class FpGrowth:
    def __init__(self, data, sup, conf):
        self.data = data
        self.items = []
        self.min_sup = sup
        self.min_conf = conf
        self.can_table = {}
        self.tree_root = None
        self.unique_item()
        self.con_pat_base_table = {}

    def unique_item(self):
        for transaction in self.data:
            for item in transaction:
                if item not in self.items:
                    self.items.append(item)
        self.items = sorted(self.items)
        print("Unique Items: ", self.items)
        self.gen_can_table()

    def gen_can_table(self):
        print("\n\nCandidate Table: ")
        self.can_table = {}
        for item in self.items:
            count = 0
            for transaction in self.data:
                if item in transaction:
                    count += 1
            if count >= self.min_sup:
                self.can_table[item] = count
        self.can_table = dict(sorted(self.can_table.items(), key=lambda item: item[1], reverse=True))
        for item in self.can_table:
            print(item, '->', self.can_table[item])
        self.dataset_sorting()

    def dataset_sorting(self):
        updated_data = []
        for transactions in self.data:
            mini_list = []
            for item in self.can_table:
                if item in transactions:
                    mini_list.append(item)
            updated_data.append(mini_list)
        self.data = updated_data
        print(self.data)
        self.create_tree()

    def create_tree(self):
        root = treeNode(None)
        self.tree_root = root
        for transaction in self.data:
            current_node = root
            for item in transaction:
                if item in current_node.child:
                    current_node = current_node.child[item]
                    current_node.value+=1
                else:
                    new_node = treeNode(item, current_node)
                    current_node.child[item] = new_node
                    current_node = new_node
                    print(current_node.name)
        self.print_tree(self.tree_root)
        self.conditional_pattern_base()

    def print_tree(self, cn):
        current_node = cn
        print("Name:",current_node.name)
        print("value:",current_node.value)
        for child in current_node.child:
             self.print_tree(current_node.child[child])

    def conditional_pattern_base(self):
        con_pat_base_table = {}
        root_node = self.tree_root

        def last_node_finder(child):
            current_node = child
            for child in current_node.child:
               path_builder(current_node.child[child])
               last_node_finder(current_node.child[child])

        def path_builder(last_node):
          current_node = last_node
          node_name = current_node.name
          node_value = current_node.value
          current_node = current_node.parent
          path = str(current_node.name)
          i=1
          while True:
              if current_node.parent.name != None:
                    current_node = current_node.parent
                    path = str(current_node.name) + ', ' + path
              else:
                  break

          mini_dic = {}
          mini_dic[path]=node_value
          if node_name in con_pat_base_table:
              con_pat_base_table[node_name]=con_pat_base_table[node_name],mini_dic
          else:
              con_pat_base_table[node_name]=mini_dic

        for child in root_node.child:
            path = {}
            path_value = None
            last_node_finder(root_node.child[child])
        self.con_pat_base_table=con_pat_base_table
        print(self.con_pat_base_table)


class treeNode:
    def __init__(self, item, parent=None):
        self.name = item
        self.parent = parent
        self.child = {}
        self.value = 1


dataset = [['K', 'M', 'P'],
           ['M', 'S'],
           ['M','MT'],
           ['K', 'M', 'S'],
           ['K', 'MT'],
           ['M', 'MT'],
           ['K', 'MT'],
           ['K', 'M', 'MT', 'P'],
           ['K', 'M', 'MT']]

fp = FpGrowth(dataset, 2, 35)